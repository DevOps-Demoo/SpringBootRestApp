pipeline {
    environment {
		PROJECT_ID = "sd-devops"
		APP_NAME = "sample-java-app"
		CLUSTER_NAME = "cluster-1"
		CLUSTER_ZONE = "us-central1-a"
		CREDENTIALS_ID = "sd-devops"
  	} 
	//agent any
  agent {
    kubernetes {
      label 'SpringBootRestApp'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  containers:
  - name: gradle
    image: gradle:3.5-jdk8-alpine
    command:
    - cat
    tty: true
"""
}
	}
  
    stages {
			stage('check_gradle_version') {
				steps {
					container('gradle') {
						sh 'gradle -v'
						sh 'echo workspace is $WORKSPACE'
						sh "ls -la ${pwd()}"
						sh 'chmod 777 * '
						sh './gradlew compileJava'
					}
				}
			}
			stage('check_build_version'){
			       steps {
			                  container('gradle') {
			                       /* $versionLine = (Get-Content build.gradle) -match "version\s*=\s*'\s*(\d+)\.(\d)+"
                                                 "$versionLine" -match "version\s*=\s*'\s*(\d+)\.(\d)+"
                                                  $major = $matches[1]
                                                  $minor = $matches[2]
                                                  $gitStatus = (git status) -match "On branch"
                                                 "$gitStatus" -match "On branch\s*(\w+)"
                                                  $branch = $matches[1]

                                                  $tag = "$branch-${bamboo.planKey}-$major.$minor.${bamboo.buildNumber}${bamboo.repository.branch.name}"

                                                  git tag "$tag"
                                                  git remote add origin http://${bamboo.git.user}:${bamboo.git.password}@${bamboo.git.url}
                                                  git push origin "$tag" */
						  }
				         }
			}

			 stage('Unit Test') {
				steps {
					container('gradle') {
						withMaven(maven: 'MAVEN-3.6.3') {
							withSonarQubeEnv(installationName: 'Sonarqube') {
								echo 'I am executing unit test'
								sh "ls -la ${pwd()}"
								sh 'mvn -f sample-java-app/pom.xml clean package'
							}
						}
					}
				}
			}
		
		stage('Code Quality') {
			steps {
				container('gradle') {
					withMaven(maven: 'MAVEN-3.6.3') {
						withSonarQubeEnv(installationName: 'Sonarqube') {
							echo 'I am executing code quality using sonarqube'
							sh 'mvn -f sample-java-app/pom.xml sonar:sonar'
						}
						sleep(60)
						timeout(time: 1, unit: 'MINUTES') {
							waitForQualityGate abortPipeline: true
						}
					}
				}
			}
		} 
		
	  
	   stage ("Deploy") {
              steps {
                  container ('gradle') {
                script {
                  propfile = readProperties(file: './project.properties')
		   println ("deploy:"+ propfile['feature_deploy'])
               println ("reading properties ...")
	       
	       if ( propfile['feature_deploy'] == "true" ) {
	       		withMaven(maven: 'MAVEN-3.6.3') {
					echo 'I am executing build and push the artifact with unique name showing the branch from which it is generated, to Archiva'
					sh 'mvn -X deploy:deploy-file -Dfile=$APP_NAME/target/sample-0.0.1-SNAPSHOT.jar -DpomFile=sample-java-app/pom.xml -DrepositoryId=snapshots -Durl=https://archiva.sgn.devops.accentureanalytics.com/repository/snapshots/'
				} 
				
				} 
				else {
				echo "no need"
				}
				
				}
				 sh '''
		  server_list=`cat project.properties | grep "servers" | cut -d'=' -f2 `
                      echo $server_list
		      
                      for server in $server_list
                      
                      do
                      
                      echo $server
                      done
                      
                          
                      
                      '''
				}			
		  }
		  }
		  
	  
          stage ("use env vars") {
              steps {
                  sh "printenv | sort"
                  echo "BUILD_NUMBER = ${env.BUILD_NUMBER}"
                  echo "BRANCH_NAME = ${env.BRANCH_NAME}"
		 
		 
              }
          }
	
}
}
