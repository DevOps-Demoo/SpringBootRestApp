pipeline {
     
  agent {
    kubernetes {
      label 'SpringBootRestApp'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  containers:
  - name: gradle
    image: gradle:3.5-jdk8-alpine
    command:
    - cat
    tty: true
"""
}
	}
  
    stages {
			
			stage('Build & Unit Test') {
				steps {
					container('gradle') {
						withMaven(maven: 'MAVEN-3.6.3') {
							withSonarQubeEnv(installationName: 'Sonarqube') {
								echo 'I am executing unit test'
								// sh 'for i in ESBAuditClient ESBAuditLog ESBErrorTranslator TaxESB FraudESB FulfillmentESB PaymentESB ESBRadial ESBAutomatedQueueRetry AlertESB OrderReconESB;do gradle --no-daemon -p ${i} clean build;done'
								sh 'mvn -f sample-java-app/pom.xml clean package'
							}
						}
					}
				}
			}
		
		stage('Code Quality') {
			steps {
				container('gradle') {
					withMaven(maven: 'MAVEN-3.6.3') {
						withSonarQubeEnv(installationName: 'Sonarqube') {
							echo 'I am executing code quality using sonarqube'
							sh 'mvn -f sample-java-app/pom.xml sonar:sonar'
						}
						sleep(60)
						timeout(time: 1, unit: 'MINUTES') {
							waitForQualityGate abortPipeline: true
						}
					}
				}
				
                
              
			}
		}
		stage('Publish Package') {
	  steps {
	  	
	  
	script {
                  propfile = readProperties(file: './project.properties')
		   println ("deploy:"+ propfile['feature_deploy'])
               println ("reading properties ...")
	 if ( propfile['feature_deploy'] == "true" || {env.BRANCH_NAME} == 'dev' || {env.BRANCH_NAME} == 'release' ) {
		
			container('gradle') {
				withMaven(maven: 'MAVEN-3.6.3') {
					echo 'I am pushing the artifact with unique name showing the branch from which it is generated, to Archiva'
					sh 'mvn -X deploy:deploy-file -Dfile=sample-java-app/target/sample-${env.BUILD_NUMBER}-${env.BRANCH_NAME}.jar -DpomFile=sample-java-app/pom.xml -DrepositoryId=snapshots -Durl=https://archiva.sgn.devops.accentureanalytics.com/repository/snapshots/'
					echo "noooooooooooooooooo"
				}
			}
		}
	} 
	}
	} 
	
}
}
