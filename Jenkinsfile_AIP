 pipeline {
     
  agent {
    kubernetes {
      label 'SpringBootRestApp'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  containers:
  - name: gradle
    image: gradle:3.5-jdk8-alpine
    command:
    - cat
    tty: true
"""
}
	}
  
    stages {
			
			stage('Unit Test') {
				steps {
					container('gradle') {
						withMaven(maven: 'MAVEN-3.6.3') {
							withSonarQubeEnv(installationName: 'Sonarqube') {
								echo 'I am executing unit test'
								sh "ls -la ${pwd()}"
								sh 'mvn -f sample-java-app/pom.xml clean package'
							}
						}
					}
				}
			}
		
		stage('Code Quality') {
			steps {
				container('gradle') {
					withMaven(maven: 'MAVEN-3.6.3') {
						withSonarQubeEnv(installationName: 'Sonarqube') {
							echo 'I am executing code quality using sonarqube'
							sh 'mvn -f sample-java-app/pom.xml sonar:sonar'
						}
						sleep(60)
						timeout(time: 1, unit: 'MINUTES') {
							waitForQualityGate abortPipeline: true
						}
					}
				}
				
                 /* sh "printenv | sort"
                  echo "BUILD_NUMBER = ${env.BUILD_NUMBER}"
                  echo "BRANCH_NAME = ${env.BRANCH_NAME}" */
              
			}
		}
		
		
	
	 
	  stage('Publish Package') {
	  steps {
	  	 echo "BUILD_NUMBER = ${env.BUILD_NUMBER}"
                  echo "BRANCH_NAME = ${env.BRANCH_NAME}"
	  
	script {
                  propfile = readProperties(file: './project.properties')
		   println ("deploy:"+ propfile['feature_deploy'])
               println ("reading properties ...")
	 if ( propfile['feature_deploy'] == "true" || {env.BRANCH_NAME} == 'dev' || {env.BRANCH_NAME} == 'release' ) {
		
			container('gradle') {
				withMaven(maven: 'MAVEN-3.6.3') {
					echo 'I am pushing the artifact with unique name showing the branch from which it is generated, to Archiva'
					sh 'mvn -X deploy:deploy-file -Dfile=sample-java-app/target/sample-${env.BUILD_NUMBER}-${env.BRANCH_NAME}.jar -DpomFile=sample-java-app/pom.xml -DrepositoryId=snapshots -Durl=https://archiva.sgn.devops.accentureanalytics.com/repository/snapshots/'
					echo "noooooooooooooooooo"
				}
			}
		}
	} 
	}
	} 
	
	stage ("Deploy") {
              steps {
                  container ('gradle') {
                script {
                  propfile = readProperties(file: './project.properties')
		   println ("deploy:"+ propfile['feature_deploy'])
               println ("reading properties ...")
	       
	       if ( propfile['feature_deploy'] == "true" || env.BRANCH_NAME == 'dev' || env.BRANCH_NAME == 'release' ) {
	       		withMaven(maven: 'MAVEN-3.6.3') {
					echo 'I am deploying the artifact into the target environment'
				  
   
        echo 'shutting down the tomcat ESB server'
       /* sh 'ssh $DEPLOYMENT_USER@$DEPOYMENT_SERVER "$ESB_BIN_PATH stop || sleep 20"'
        echo 'force stop any remaining mule process'
        sh 'ssh $DEPLOYMENT_USER@$DEPOYMENT_SERVER "if [[ $(ps aux | grep /opt/mule/latest/ | grep -vc grep)  > 0 ]]; then "kill -9 $(ps -ef|pgrep -f "/opt/mule/latest/bin")"; else echo "do nothing"; fi"' */
        echo 'tomcat server stopped'
     
   
    
      
        echo 'copying the tar file from jenkins to deployment directory on app and remove the old folders and untarring the new jar and war files'
        /* sh 'scp -rp $WORKSPACE/artifacts/artifact.tar $DEPLOYMENT_USER@$DEPOYMENT_SERVER:$DEPLOYMENT_STAGE_DIR/'
        sh 'ssh $DEPLOYMENT_USER@$DEPOYMENT_SERVER "cd $DEPLOYMENT_STAGE_DIR && rm -rf *.war *.jar"'
        sh 'ssh $DEPLOYMENT_USER@$DEPOYMENT_SERVER "cd $DEPLOYMENT_STAGE_DIR && tar -xvzf artifact.tar && rm -rf *.jar"'
        sh 'ssh $DEPLOYMENT_USER@$DEPOYMENT_SERVER "cd $DEPLOYMENT_DIR && rm -rf $ESB_WAR_FOLDERS && cp -rp $DEPLOYMENT_STAGE_DIR/*.war $DEPLOYMENT_DIR"' */
        echo 'Deployment has been completed'
   

        echo 'starting the tomcat ESB server'
       /* sh 'ssh $DEPLOYMENT_USER@$DEPOYMENT_SERVER "$ESB_BIN_PATH start"'
        sh 'ssh $DEPLOYMENT_USER@$DEPOYMENT_SERVER "sleep 20"' */
        echo 'tomcat server started'
					
				} 
				
				} 
				else {
				echo "no need"
				}
				
				}
				 
				}			
		  }
		  }
		  
	 
	
	 stage ('smoke_test') {
    steps {
    echo 'smoke test'
    }
    }	
	
}
}
