podTemplate(containers: [
    containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
  ]) {

    node(POD_LABEL) {
		stage('Unit Test') {
			steps {
				container('maven') {
					withMaven(maven: 'MAVEN-3.6.3') {
						withSonarQubeEnv(installationName:'Sonarqube') {
							sh 'I am executing unit test'
							sh 'mvn -f sample-java-app/pom.xml clean package'
						}
					}
				}
			}
		}

		stage('Code Quality') {
			steps {
				container('maven') {
					withMaven(maven: 'MAVEN-3.6.3') {
						withSonarQubeEnv(installationName:'Sonarqube') {
							sh 'I am executing code quality using sonarqube'	
							sh 'mvn -f sample-java-app/pom.xml sonar:sonar'
						}
						sleep(60)
						timeout(time: 1, unit: 'MINUTES') {
							waitForQualityGate abortPipeline: true
						}
					}
				}
			}   
		}

		stage('Publish Package') {
            steps {
				withMaven(maven: 'MAVEN-3.6.3') {
					sh 'I am executing build and push the artifact with unique name showing the branch from which it is generated, to Archiva'	
					sh 'mvn -X deploy:deploy-file -Dfile=sample-java-app/target/sample-0.0.1-SNAPSHOT.jar -DpomFile=sample-java-app/pom.xml -DrepositoryId=snapshots -Durl=http://35.188.92.10/repository/snapshots/'
				}		
            }
        }
		
		stage('Deploy Dev') {
			when { branch 'dev'}
            steps {
				echo "I am executing Deploy the artifact from Archiva to target dev environment. My artifact has a unique name which is automatically generated and deployed to target dev environment"
				echo "Work in progress"
            }
        }

		stage('Smoke Test'){
			when { branch 'dev'}
			steps {
				echo "I am executing Smoke Test on target dev environment post deployment"
				echo 'Work in progress'
			}
		}
	}
}
