pipeline {
    environment {
		PROJECT_ID = "sd-devops"
		APP_NAME = "sample-java-app"
		CLUSTER_NAME = "cluster-1"
		CLUSTER_ZONE = "us-central1-a"
		CREDENTIALS_ID = "sd-devops"
  	} 
	//agent any
  agent {
    kubernetes {
      label 'SpringBootRestApp'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  containers:
  - name: gradle
    image: gradle:3.5-jdk8-alpine
    command:
    - cat
    tty: true
"""
}
	}
  
    stages {
			stage('check_gradle_version') {
				steps {
					container('gradle') {
						sh 'gradle -v'
						sh 'echo workspace is $WORKSPACE'
						sh "ls -la ${pwd()}"
						sh 'chmod 777 * '
						sh './gradlew compileJava'
					}
				}
			}
			stage('copy_environment_properties'){
			       steps {
			                  container('gradle') {
			                       /* mkdir properties
                                                 cp -r SterlingESBAux/properties/dev1 properties/
                                                 cp -r SterlingESBAux/properties/uat1 properties/
                                                 cp -r SterlingESBAux/properties/perf1 properties/
                                                 cp -r SterlingESBAux/properties/perf2 properties/
                                                 cp -r SterlingESBAux/properties/prod1 properties/
                                                 cp -r SterlingESBAux/properties/prod2 properties/

                                                 ls -la properties
                                                      */
						  }
				         }
			}
			stage('check_sonar_plugin'){
			       steps {
			                  container('gradle') {
			                       /* grep -q "org.sonarqube" build.gradle
					       if [ $? -gt 0 ]; then
					       sed -i '' '/register plug-ins/ {a\
					       plugins {id "org.sonarqube" version "3.0"}
					       }' build.gradle
                                               Fi
					       */
						  }
				         }
			}
			
			

			 stage('Unit Test') {
				steps {
					container('gradle') {
						withMaven(maven: 'MAVEN-3.6.3') {
							withSonarQubeEnv(installationName: 'Sonarqube') {
								echo 'I am executing unit test'
								sh "ls -la ${pwd()}"
								sh 'mvn -f sample-java-app/pom.xml clean package'
							}
						}
					}
				}
			}
		
		stage('Code Quality') {
			steps {
				container('gradle') {
					withMaven(maven: 'MAVEN-3.6.3') {
						withSonarQubeEnv(installationName: 'Sonarqube') {
							echo 'I am executing code quality using sonarqube'
							sh 'mvn -f sample-java-app/pom.xml sonar:sonar'
						}
						sleep(60)
						timeout(time: 1, unit: 'MINUTES') {
							waitForQualityGate abortPipeline: true
						}
					}
				}
			}
		} 
		
	  
	   stage ("Deploy") {
              steps {
                  container ('gradle') {
                script {
                  propfile = readProperties(file: './project.properties')
		   println ("deploy:"+ propfile['feature_deploy'])
               println ("reading properties ...")
	       
	       if ( propfile['feature_deploy'] == "true" ) {
	       		withMaven(maven: 'MAVEN-3.6.3') {
					echo 'I am executing build and push the artifact with unique name showing the branch from which it is generated, to Archiva'
					sh 'mvn -X deploy:deploy-file -Dfile=$APP_NAME/target/sample-0.0.1-SNAPSHOT.jar -DpomFile=sample-java-app/pom.xml -DrepositoryId=snapshots -Durl=https://archiva.sgn.devops.accentureanalytics.com/repository/snapshots/'
				} 
				
				} 
				else {
				echo "no need"
				}
				
				}
				 sh '''
		  server_list=`cat project.properties | grep "servers" | cut -d'=' -f2 `
                      echo $server_list
		      
                      for server in $server_list
                      
                      do
                      
                      echo $server
                      done
                      
                          
                      
                      '''
				}			
		  }
		  }
		  
	  
          stage ('Smoke Test') {
            parallel {
                stage('Security Test') {
                    steps {
                        echo 'I am running Security Test here'
                    }
                    steps {
                        echo 'I am running Smoke Test here'
                        /*RESP=`curl -X GET "${bamboo.uri}/RequestsRunning" -H "accept: application/xml" -H "authorization: bearer lR0AA2qfq7v9Ry96vDAgqcer1GPVd5yStmv1_aJVFS43rk06EytB7WsS0_owoiXIgpOXmZVEfkY4ST0JwHtRBk7RH0QRaldWtQT8udC0VdimdGx38RddY2sGaeeF0t9Aflr5rh1Jc_EUfkNK8YrKVxQ6kxB05aCe46CD2fkognv7TiJATmht-ycUjEsd_oy8jH5EK9fmn9eL-wXavNTQcEdsUmFm3-2r3IJDzMK7XCa74qu353yOKLvVyZ1yYQBnc1_fY5GS1BDrFLUZprxpAS30lGEu-d_JTTOQ989UJtIEB3cZzDkIQzeqdYBGCsiDdjdHo2DC1FK2kVPyBITTbQ"`
                        echo "The response for current execution status is: $RESP"
                        if [ "$RESP" != "[]" ];
                        then
                        echo "There is a test executing currently in Worksoft. Hence, not proceeding with the execution of Worksoft test cases."
                        exit 1
                        else
                        echo "There are no tests executing right now. Hence, proceeding with Worksoft test execution"
                        fi

                            # To abort the request before attempting to re-run, uncomment and run below line.
                            # abort=$(curl -X PUT -H "Authorization: Bearer $token" -d "" -H "id: ${bamboo.RequestID}" ${bamboo.uri}/Request/${bamboo.RequestID}/abort/)
                            guid=$(curl -X PUT -H "Authorization: Bearer $token" -d "" -H "parameters: {TestEnv}{${bamboo.stage_name}}" -H "id: ${bamboo.RequestID}" ${bamboo.uri}/ExecuteRequest/ | tr -d \")
                            echo "The GUID is: $guid"
                            status=$(curl -X GET -H "Authorization: Bearer $token" -d "" -H "APIRequestID: $guid" ${bamboo.uri}/ExecutionStatus/ | awk -F':' '{print $2}' | tr -d \" | tr -d \})
                            echo "The status is: $status"
                            while [[ $status != *"Completed"* ]]
                            do
                        status=$(curl -X GET -H "Authorization: Bearer $token" -d "" -H "APIRequestID: $guid" ${bamboo.uri}/ExecutionStatus/ | awk -F':' '{print $2}' | tr -d \" | tr -d \})
                        echo "The status is: $status"
                            sleep 15
                            done
                            status=$(curl -X GET -H "Authorization: Bearer $token" -d "" -H "APIRequestID: $guid" ${bamboo.uri}/ExecutionStatus/)
                            echo "The status is: $status"
                            execstatus=$(curl -X GET -H "Authorization: Bearer $token" -d "" -H "APIRequestID: $guid" ${bamboo.uri}/ExecutionStatus/ | awk -F':' '{print $3}' | tr -d \" | tr -d \})
                            echo "The exec status is: $execstatus"
                            if [[ $execstatus != *Passed* ]];
                        then
                            echo "Failed"
                            exit 1
                        else
                            echo "Passed"
                        exit
                        fi
                        exit */
                    }
                }
            } 
        }
	
}
}
